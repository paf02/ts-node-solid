swagger: "2.0"
info:
  version: "1.0.0."
  title: "Metering API"
  description: "Metering API explorer"
  contact:
    name: "Pablo Montero"
    email: "pallito020390@hotmail.com"
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT

host: "localhost:5000"
basePath: "/api"
tags:
- name: "users"
  description: "API for the users on the system"
schemes:
- "http"
- "https"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /users:
    get:
      operationId: "getUsers"
      security:
      - Bearer: []
      tags:
      - "users"
      summary: "Retrieve users"
      description: "Retrieve a list of users that matches the filter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filter"
        in: "query"
        type: "string"
      responses:
        200:
          description: OK
        401:
          description: UNAUTHORIZED
    post:
      operationId: "addUser"
      security:
      - Bearer: []
      tags:
      - "users"
      summary: "Add new users"
      description: "Add new users to the API"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be added"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        200:
          description: OK
        401:
          description: UNAUTHORIZED
  /users/{id}:
    get:
      operationId: "getUserById"
      security:
      - Bearer: []
      tags:
      - "users"
      summary: "Retrieve an user"
      description: "Fetches user information by Id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the user to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: OK
        401:
          description: UNAUTHORIZED
    put:
      operationId: "updateUserById"
      security:
      - Bearer: []
      tags:
      - "users"
      summary: "Update an user"
      description: "Update a user to the API"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the user to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User object to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: OK
        401:
          description: UNAUTHORIZED
    delete:
      operationId: "deleteUserById"
      security:
      - Bearer: []
      tags:
      - "users"
      summary:  "Delete an user"
      description: "Delete a user to the API"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the user to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: OK
        401:
          description: UNAUTHORIZED
  /users/register:
    post:
      operationId: "registerUser"
      tags:
      - "users"
      summary: "Register a new User"
      description: "Register a new User"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: OK
  /users/login:
    post:
      operationId: "loginUser"
      tags:
      - "users"
      summary: "Login with an user"
      description: "Login with an user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be updated"
        required: true
        schema:
          $ref: "#/definitions/UserCredentials"
      responses:
        200:
          description: OK
definitions:
  UserCredentials:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      employeeId:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      realm:
        type: "string"
      password:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"